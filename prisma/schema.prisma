// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String    @unique
  hashedPassword String
  role           Role      @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  
  repositories   Repository[]
  queries        Query[]
  
  @@map("users")
}

model Repository {
  id          String   @id @default(cuid())
  name        String
  url         String   @unique
  description String?
  status      RepoStatus @default(PENDING)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files       File[]
  pullRequests PullRequest[]
  
  @@map("repositories")
}

model File {
  id           String   @id @default(cuid())
  path         String
  content      String?
  docstring    String?
  language     String?
  repositoryId String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@unique([path, repositoryId])
  @@map("files")
}

model Query {
  id          String   @id @default(cuid())
  question    String
  answer      String?
  userId      String
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("queries")
}

model PullRequest {
  id           String   @id @default(cuid())
  number       Int
  title        String
  author       String
  status       PRStatus @default(OPEN)
  url          String
  repositoryId String
  aiNotes      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade)
  
  @@unique([number, repositoryId])
  @@map("pull_requests")
}

enum Role {
  USER
  ADMIN
}

enum RepoStatus {
  PENDING
  CLONING
  PARSING
  INDEXING
  COMPLETED
  ERROR
}

enum PRStatus {
  OPEN
  CLOSED
  MERGED
}